-- Setting variables for time of day/ day of week analyses
DECLARE
MORNING_START,
MORNING_END,
AFTERNOON_END,
EVENING_END INT64;
-- Set the times for the times of the day
SET
MORNING_START = 6;
SET
MORNING_END = 12;
SET
AFTERNOON_END = 18;
SET
EVENING_END = 21;

SELECT
A.Id,
A.Calories,
* EXCEPT(Id,
Calories,
ActivityDay,
Sleep_Day,
SedentaryMinutes,
LightlyActiveMinutes,
FairlyActiveMinutes,
VeryActiveMinutes,
SedentaryActiveDistance,
LightActiveDistance,
ModeratelyActiveDistance,
VeryActiveDistance),
I.Sedentary_Minutes,
I.Lightly_Active_Minutes,
I.Fairly_Active_Minutes,
I.Very_Active_Minutes,
I.Sedentary_Active_Distance,
I.Light_Active_Distance,
I.Moderately_Active_Distance,
I.Very_Active_Distance,

FROM
`sampling123.bella_data_case_2.daily_activity`  A
LEFT JOIN
`sampling123.bella_data_case_2.daily_calories` C
ON
A.Id = C.Id
AND A.ActivityDate=C.Activity_Day
AND A.Calories = C.Calories
LEFT JOIN
`sampling123.bella_data_case_2.daily_intensities` I
ON
A.Id = I.Id
AND A.ActivityDate=I.Activity_Day
AND A.FairlyActiveMinutes = I.Fairly_Active_Minutes
AND A.LightActiveDistance = I.Light_Active_Distance
AND A.LightlyActiveMinutes = I.Lightly_Active_Minutes
AND A.ModeratelyActiveDistance = I.Moderately_Active_Distance
AND A.SedentaryActiveDistance = I.Sedentary_Active_Distance
AND A.SedentaryMinutes = I.Sedentary_Minutes
AND A.VeryActiveDistance = I.Very_Active_Distance
AND A.VeryActiveMinutes = I.Very_Active_Minutes
LEFT JOIN
`sampling123.bella_data_case_2.daily_steps` S
ON
A.Id = S.Id
AND A.ActivityDate=S.ActivityDay
LEFT JOIN
`sampling123.bella_data_case_2.sleep_day` Sl
ON
A.Id = Sl.Id
AND A.ActivityDate = EXTRACT(DATE FROM Sl.Sleep_Day);
-- Say we are considering sleep related products as a possibility, let's take a
-- moment to see if/ how people nap during the day
-- To do this we are assuming that a nap is any time someone sleeps but goes to sleep and wakes up on the same day
SELECT
Id,
sleep_start AS sleep_date,
COUNT(log_Id) AS number_naps,
SUM(EXTRACT(HOUR
FROM
time_sleeping)) AS total_time_sleeping
FROM (
SELECT
Id,
log_Id,
MIN(DATE(date)) AS sleep_start,
MAX(DATE(date)) AS sleep_end,
TIME( TIMESTAMP_DIFF(MAX(date),MIN(date),HOUR),
MOD(TIMESTAMP_DIFF(MAX(date),MIN(date),MINUTE),60),
MOD(MOD(TIMESTAMP_DIFF(MAX(date),MIN(date),SECOND),3600),60) ) AS time_sleeping
FROM
`sampling123.bella_data_case_2.minute_sleep`
WHERE
value=1
GROUP BY
1,
2)
WHERE
sleep_start=sleep_end
GROUP BY
1,
2
ORDER BY
3 DESC;
-- Suppose we would like to do an analysis based upon the time of day and day of the week
-- We will do this at a person level such that we smooth over anomalous days for an individual
WITH
user_dow_summary AS (
SELECT
Id,
FORMAT_TIMESTAMP("%w", Activity_Hour) AS dow_number,
FORMAT_TIMESTAMP("%A", Activity_Hour) AS day_of_week,
CASE
WHEN FORMAT_TIMESTAMP("%A", Activity_Hour) IN ("Sunday", "Saturday") THEN
"Weekend"
WHEN FORMAT_TIMESTAMP("%A", Activity_Hour) NOT IN ("Sunday",
"Saturday") THEN "Weekday"
ELSE
"ERROR"
END
AS part_of_week,
CASE
WHEN TIME(Activity_Hour) BETWEEN TIME(MORNING_START, 0, 0) AND TIME(MORNING_END,
0, 0) THEN "Morning"
WHEN TIME(Activity_Hour) BETWEEN TIME(MORNING_END,
0,
0)
AND TIME(AFTERNOON_END,
0,
0) THEN "Afternoon"
WHEN TIME(Activity_Hour) BETWEEN TIME(AFTERNOON_END, 0, 0) AND TIME(EVENING_END,
0, 0) THEN "Evening"
WHEN TIME(Activity_Hour) >= TIME(EVENING_END,
0,
0)
OR TIME(TIMESTAMP_TRUNC(Activity_Hour, MINUTE)) <= TIME(MORNING_START,
0,
0) THEN "Night"
ELSE
"ERROR"
END
AS time_of_day,
SUM(Total_Intensity) AS total_intensity,
SUM(Average_Intensity) AS total_average_intensity,
AVG(Average_Intensity) AS average_intensity,
MAX(Average_Intensity) AS max_intensity,
MIN(Average_Intensity) AS min_intensity
FROM
`sampling123.bella_data_case_2.hourly_intensities`
GROUP BY
1,
2,
3,
4,
5),
intensity_deciles AS (
SELECT
DISTINCT dow_number,
part_of_week,
day_of_week,
time_of_day,
ROUND(PERCENTILE_CONT(total_intensity,
0.1) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4)
AS total_intensity_first_decile,
ROUND(PERCENTILE_CONT(total_intensity,
0.2) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4)
AS total_intensity_second_decile,
ROUND(PERCENTILE_CONT(total_intensity,
0.3) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4)
AS total_intensity_third_decile,
ROUND(PERCENTILE_CONT(total_intensity,
0.4) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4)
AS total_intensity_fourth_decile,
ROUND(PERCENTILE_CONT(total_intensity,
0.6) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4)
AS total_intensity_sixth_decile,
ROUND(PERCENTILE_CONT(total_intensity,
0.7) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4)
AS total_intensity_seventh_decile,
ROUND(PERCENTILE_CONT(total_intensity,
0.8) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4)
AS total_intensity_eigth_decile,
ROUND(PERCENTILE_CONT(total_intensity,
0.9) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4)
AS total_intensity_ninth_decile
FROM
user_dow_summary ),
basic_summary AS (
SELECT
part_of_week,
day_of_week,
time_of_day,
SUM(total_intensity) AS total_total_intensity,
AVG(total_intensity) AS average_total_intensity,
SUM(total_average_intensity) AS total_total_average_intensity,
AVG(total_average_intensity) AS average_total_average_intensity,
SUM(average_intensity) AS total_average_intensity,
AVG(average_intensity) AS average_average_intensity,
AVG(max_intensity) AS average_max_intensity,
AVG(min_intensity) AS average_min_intensity
FROM
user_dow_summary
GROUP BY
1,
dow_number,
2,
3)
SELECT
*
FROM
basic_summary
LEFT JOIN
intensity_deciles
USING
(part_of_week,
day_of_week,
time_of_day)
ORDER BY
1,
dow_number,
2,
CASE
WHEN time_of_day = "Morning" THEN 0
WHEN time_of_day = "Afternoon" THEN 1
WHEN time_of_day = "Evening" THEN 2
WHEN time_of_day = "Night" THEN 3
END
