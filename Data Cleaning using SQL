-- checking through the dataset
SELECT*
FROM Portfolio_Project..nashville_housing

-- changing date format
ALTER TABLE Portfolio_Project..nashville_housing
ADD Sale_Date date
UPDATE Portfolio_Project..nashville_housing
SET Sale_Date = CAST(SaleDate AS Date)

-- isolating PropertyAddresses that are empty
SELECT * 
FROM Portfolio_Project..nashville_housing 
WHERE PropertyAddress is null
ORDER BY ParcelID

-- populating the addresses using SELF JOINING
SELECT a.ParcelID, a.PropertyAddress, 
	b.ParcelID, b.PropertyAddress, 
	isnull(a.PropertyAddress, b.PropertyAddress) Isnul,
	coalesce(a.PropertyAddress, b.PropertyAddress) Coalesc
FROM Portfolio_Project..nashville_housing a
JOIN Portfolio_Project..nashville_housing b
ON a.ParcelID = b.ParcelID
AND a.UniqueID != b.UniqueID
WHERE a.PropertyAddress is null

-- isnull can aslo be used to replace the coalesce
update a
set PropertyAddress = coalesce(a.PropertyAddress, b.PropertyAddress)
FROM Portfolio_Project..nashville_housing a
JOIN Portfolio_Project..nashville_housing b
ON a.ParcelID = b.ParcelID
AND a.UniqueID != b.UniqueID

-- splitting strings of address
SELECT PropertyAddress,
 SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)- 1) AS Address,
 SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN (PropertyAddress)) AS City
FROM Portfolio_Project..nashville_housing

--updating the database
ALTER TABLE Portfolio_Project..nashville_housing
ADD Address nvarchar(255), City nvarchar(255)

UPDATE Portfolio_Project..nashville_housing
SET Address = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)- 1),
City = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress))

--splitting owner address and updating the database
SELECT OwnerAddress
FROM Portfolio_Project..nashville_housing

SELECT OwnerAddress,
PARSENAME(REPLACE(OwnerAddress, ',', '.' ),3),
PARSENAME(REPLACE(OwnerAddress, ',', '.' ),2),
PARSENAME(REPLACE(OwnerAddress, ',', '.' ),1)
FROM Portfolio_Project..nashville_housing

ALTER TABLE Portfolio_Project..nashville_housing
ADD Owner_Address nvarchar(255), Owner_Address_City nvarchar (255),
	Owner_Address_Area nvarchar(255)

UPDATE Portfolio_Project..nashville_housing
SET Owner_Address = PARSENAME(REPLACE(OwnerAddress, ',', '.' ),3),
	Owner_Address_City = PARSENAME(REPLACE(OwnerAddress, ',', '.' ),2),
	Owner_Address_Area = PARSENAME(REPLACE(OwnerAddress, ',', '.' ),1)

-- making correction and updating the database
SELECT SoldAsVacant, COUNT(SoldAsVacant)
FROM Portfolio_Project..nashville_housing
GROUP BY SoldAsVacant
ORDER BY 2

UPDATE Portfolio_Project..nashville_housing
SET SoldAsVacant = CASE
					 WHEN SoldAsVacant = 'Y' THEN 'Yes'
					 WHEN SoldAsVacant = 'N' THEN 'No'
					 ELSE SoldAsVacant
				   END

-- creating CTE to confirm if UniqueID is really Unique or there is duplicate
WITH c_uniq AS
(
SELECT COUNT(UniqueID) AS Uniq
FROM Portfolio_Project..nashville_housing
GROUP BY UniqueID)

SELECT Uniq
FROM c_uniq
WHERE Uniq > 1

-- checking for data to clean
SELECT *
FROM Portfolio_Project..nashville_housing
WHERE SalePrice IS NULL

--finding duplicates
WITH CTE AS(
SELECT *,
	ROW_NUMBER() OVER (PARTITION BY ParcelID, PropertyAddress, SaleDate,
	SalePrice, LegalReference, OwnerName ORDER BY UniqueID) As Row_num
FROM Portfolio_Project..nashville_housing
)
SELECT *
FROM CTE
WHERE Row_num > 1

-- Removing duplicates
WITH CTE AS(
SELECT *,
	ROW_NUMBER() OVER (PARTITION BY ParcelID, PropertyAddress, SaleDate,
	SalePrice, LegalReference, OwnerName ORDER BY UniqueID) As Row_num
FROM Portfolio_Project..nashville_housing
)
DELETE 
FROM CTE
WHERE Row_num > 1


--deleting unused columns
ALTER TABLE Portfolio_Project..nashville_housing
DROP COLUMN SaleDate, PropertyAddress, OwnerAddress, TaxDistrict

-- checking to see if dataset is ready analysis
SELECT *
FROM Portfolio_Project..nashville_housing









